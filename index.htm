<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Quantum Aggregator Strategy - SOLANA/USDT Real-Time</title>
    <script src="npm/chart.js%404.4.0/dist/chart.umd.js"></script>
    <script src="npm/chartjs-adapter-date-fns%403.0.0/dist/chartjs-adapter-date-fns.bundle.min.js"></script>
    <script src="npm/chartjs-plugin-zoom%402.0.1/dist/chartjs-plugin-zoom.min.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            background: linear-gradient(135deg, #0c0c0c 0%, #1a1a1a 100%);
            color: #ffffff;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            overflow-x: hidden;
        }
        
        .header {
            background: rgba(0, 0, 0, 0.8);
            padding: 20px;
            text-align: center;
            border-bottom: 2px solid #333;
            position: sticky;
            top: 0;
            z-index: 100;
            backdrop-filter: blur(10px);
        }
        
        .header h1 {
            color: #00d4aa;
            font-size: 2.5em;
            margin-bottom: 10px;
            text-shadow: 0 0 20px rgba(0, 212, 170, 0.5);
        }
        
        .status-bar {
            display: flex;
            justify-content: center;
            gap: 30px;
            margin-top: 15px;
            flex-wrap: wrap;
        }
        
        .status-item {
            padding: 8px 16px;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 8px;
            border: 1px solid rgba(255, 255, 255, 0.2);
            backdrop-filter: blur(5px);
        }
        
        .status-item.connected {
            border-color: #00d4aa;
            box-shadow: 0 0 10px rgba(0, 212, 170, 0.3);
        }
        
        .price-display {
            font-size: 1.2em;
            font-weight: bold;
        }
        
        .price-up { color: #00ff88; }
        .price-down { color: #ff4444; }
        
        .main-container {
            display: grid;
            grid-template-columns: 1fr 350px;
            gap: 20px;
            padding: 20px;
            max-width: 1600px;
            margin: 0 auto;
        }
        
        .chart-section {
            background: rgba(0, 0, 0, 0.6);
            border-radius: 12px;
            padding: 20px;
            border: 1px solid rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
        }
        
        .controls-section {
            background: rgba(0, 0, 0, 0.6);
            border-radius: 12px;
            padding: 20px;
            border: 1px solid rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            height: fit-content;
            max-height: 80vh;
            overflow-y: auto;
        }
        
        #chart {
            width: 100%;
            height: 600px;
            border-radius: 8px;
            background: #0a0a0a;
        }
        
        .control-group {
            margin-bottom: 25px;
            padding: 15px;
            background: rgba(255, 255, 255, 0.05);
            border-radius: 8px;
            border: 1px solid rgba(255, 255, 255, 0.1);
        }
        
        .control-group h3 {
            color: #00d4aa;
            margin-bottom: 15px;
            font-size: 1.1em;
            border-bottom: 1px solid rgba(0, 212, 170, 0.3);
            padding-bottom: 8px;
        }
        
        .control-row {
            display: flex;
            flex-direction: column;
            gap: 8px;
            margin-bottom: 12px;
        }
        
        .control-row-inline {
            display: flex;
            gap: 10px;
            align-items: center;
        }
        
        label {
            font-size: 0.9em;
            color: #cccccc;
            font-weight: 500;
        }
        
        input, select, button, textarea {
            padding: 8px;
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 6px;
            background: rgba(0, 0, 0, 0.5);
            color: #ffffff;
            font-size: 0.85em;
            transition: all 0.3s ease;
        }
        
        input:focus, select:focus, textarea:focus {
            outline: none;
            border-color: #00d4aa;
            box-shadow: 0 0 10px rgba(0, 212, 170, 0.3);
        }
        
        button {
            background: linear-gradient(135deg, #00d4aa 0%, #00a388 100%);
            border: none;
            cursor: pointer;
            font-weight: bold;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            transition: all 0.3s ease;
            padding: 10px 15px;
        }
        
        button:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 212, 170, 0.4);
        }
        
        button:active {
            transform: translateY(0);
        }
        
        button.danger {
            background: linear-gradient(135deg, #ff4444 0%, #cc3333 100%);
        }
        
        button.secondary {
            background: linear-gradient(135deg, #666 0%, #444 100%);
        }

        button.python-indicator {
            background: linear-gradient(135deg, #3776ab 0%, #ffd43b 100%);
            color: #000;
            font-weight: bold;
        }
        
        .signal-history {
            max-height: 150px;
            overflow-y: auto;
            background: rgba(0, 0, 0, 0.3);
            border-radius: 6px;
            padding: 10px;
            border: 1px solid rgba(255, 255, 255, 0.1);
        }
        
        .signal-item {
            padding: 6px;
            margin: 3px 0;
            border-radius: 4px;
            font-size: 0.75em;
            border-left: 3px solid;
        }
        
        .signal-long {
            background: rgba(0, 255, 136, 0.1);
            border-left-color: #00ff88;
        }
        
        .signal-short {
            background: rgba(255, 68, 68, 0.1);
            border-left-color: #ff4444;
        }
        
        .indicator-values {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 8px;
            font-size: 0.75em;
        }
        
        .indicator-item {
            background: rgba(0, 0, 0, 0.3);
            padding: 6px;
            border-radius: 4px;
            border: 1px solid rgba(255, 255, 255, 0.1);
        }
        
        .indicator-label {
            color: #999;
            font-size: 0.7em;
        }
        
        .indicator-value {
            font-weight: bold;
            color: #fff;
        }
        
        .simulation-section {
            margin-top: 20px;
            background: rgba(0, 0, 0, 0.3);
            padding: 20px;
            border-radius: 8px;
            border: 1px solid rgba(255, 255, 255, 0.1);
        }
        
        .simulation-results {
            max-height: 300px;
            overflow-y: auto;
            background: rgba(0, 0, 0, 0.5);
            border-radius: 6px;
            padding: 15px;
            margin: 10px 0;
        }
        
        .trade-table {
            width: 100%;
            border-collapse: collapse;
            font-size: 0.8em;
        }
        
        .trade-table th, .trade-table td {
            padding: 8px;
            text-align: left;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }
        
        .trade-table th {
            background: rgba(0, 212, 170, 0.2);
            color: #00d4aa;
            font-weight: bold;
        }
        
        .trade-table tr:hover {
            background: rgba(255, 255, 255, 0.05);
        }
        
        .performance-metrics {
            background: rgba(0, 0, 0, 0.3);
            padding: 15px;
            border-radius: 8px;
            border: 1px solid rgba(255, 255, 255, 0.1);
        }
        
        .metric-row {
            display: flex;
            justify-content: space-between;
            margin: 6px 0;
            font-size: 0.85em;
        }
        
        .metric-label {
            color: #ccc;
        }
        
        .metric-value {
            font-weight: bold;
        }
        
        .metric-positive {
            color: #00ff88;
        }
        
        .metric-negative {
            color: #ff4444;
        }
        
        .loading {
            display: flex;
            align-items: center;
            justify-content: center;
            height: 60px;
            font-size: 0.9em;
            color: #00d4aa;
        }
        
        .error {
            background: rgba(255, 68, 68, 0.1);
            border: 1px solid #ff4444;
            border-radius: 6px;
            padding: 10px;
            margin: 10px 0;
            color: #ff4444;
            font-size: 0.85em;
        }
        
        .success {
            background: rgba(0, 255, 136, 0.1);
            border: 1px solid #00ff88;
            border-radius: 6px;
            padding: 10px;
            margin: 10px 0;
            color: #00ff88;
            font-size: 0.85em;
        }
        
        @keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: 0.5; }
            100% { opacity: 1; }
        }
        
        .pulse {
            animation: pulse 1s infinite;
        }
        
        .alert-setup {
            background: rgba(255, 193, 7, 0.1);
            border: 1px solid #ffc107;
            border-radius: 6px;
            padding: 10px;
            margin: 5px 0;
            font-size: 0.8em;
        }
        
        .alert-active {
            background: rgba(255, 68, 68, 0.2);
            border: 1px solid #ff4444;
            animation: pulse 2s infinite;
        }
        
        .optimization-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 10px;
            margin: 10px 0;
        }
        
        .tabs {
            display: flex;
            margin-bottom: 15px;
            border-bottom: 1px solid rgba(255, 255, 255, 0.2);
        }
        
        .tab {
            padding: 8px 15px;
            cursor: pointer;
            border-bottom: 2px solid transparent;
            transition: all 0.3s ease;
            font-size: 0.85em;
        }
        
        .tab.active {
            color: #00d4aa;
            border-bottom-color: #00d4aa;
        }
        
        .tab-content {
            display: none;
        }
        
        .tab-content.active {
            display: block;
        }

        /* Modal Styles */
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0, 0, 0, 0.8);
            backdrop-filter: blur(5px);
        }

        .modal-content {
            background: linear-gradient(135deg, #1a1a1a 0%, #2a2a2a 100%);
            margin: 5% auto;
            padding: 30px;
            border: 1px solid rgba(0, 212, 170, 0.3);
            border-radius: 15px;
            width: 90%;
            max-width: 600px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);
            position: relative;
        }

        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 25px;
            padding-bottom: 15px;
            border-bottom: 2px solid rgba(0, 212, 170, 0.3);
        }

        .modal-header h2 {
            color: #00d4aa;
            font-size: 1.5em;
            margin: 0;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .close {
            color: #aaa;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
            transition: color 0.3s ease;
        }

        .close:hover,
        .close:focus {
            color: #00d4aa;
            text-decoration: none;
        }

        .modal-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            margin-bottom: 20px;
        }

        .modal-section {
            background: rgba(0, 0, 0, 0.3);
            padding: 20px;
            border-radius: 10px;
            border: 1px solid rgba(255, 255, 255, 0.1);
        }

        .modal-section h3 {
            color: #00d4aa;
            margin-bottom: 15px;
            font-size: 1.1em;
            border-bottom: 1px solid rgba(0, 212, 170, 0.3);
            padding-bottom: 8px;
        }

        .param-row {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 12px;
        }

        .param-row label {
            font-size: 0.9em;
            color: #cccccc;
            flex: 1;
        }

        .param-row input {
            width: 80px;
            padding: 6px;
            font-size: 0.85em;
        }

        .threshold-section {
            text-align: center;
            background: rgba(0, 212, 170, 0.1);
            padding: 20px;
            border-radius: 10px;
            border: 1px solid rgba(0, 212, 170, 0.3);
            margin-bottom: 20px;
        }

        .threshold-section h3 {
            color: #00d4aa;
            margin-bottom: 15px;
        }

        .threshold-controls {
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 15px;
        }

        .threshold-display {
            font-size: 2em;
            font-weight: bold;
            color: #00d4aa;
            min-width: 80px;
        }

        .modal-buttons {
            display: flex;
            justify-content: space-between;
            gap: 15px;
            margin-top: 25px;
        }

        .modal-buttons button {
            flex: 1;
            padding: 12px;
            font-size: 0.9em;
        }
        
        @media (max-width: 1024px) {
            .main-container {
                grid-template-columns: 1fr;
                gap: 15px;
                padding: 15px;
            }
            
            .status-bar {
                gap: 15px;
            }
            
            .header h1 {
                font-size: 2em;
            }
            
            .controls-section {
                max-height: none;
            }

            .modal-content {
                width: 95%;
                margin: 2% auto;
                padding: 20px;
            }

            .modal-grid {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>⚡ Quantum Aggregator Strategy</h1>
        <div class="status-bar">
            <div class="status-item" id="connection-status">
                <span>🔌 Status: </span>
                <span id="status-text">Conectando...</span>
            </div>
            <div class="status-item">
                <span>📊 Par: </span>
                <span>SOLANA/USDT Perpétuo</span>
            </div>
            <div class="status-item">
                <span>⏱️ Timeframe: </span>
                <span>5m</span>
            </div>
            <div class="status-item">
                <span>💰 Preço: </span>
                <span id="current-price" class="price-display">$0.00</span>
            </div>
            <div class="status-item">
                <span>📈 24h: </span>
                <span id="price-change">+0.00%</span>
            </div>
        </div>
    </div>

    <div class="main-container">
        <div class="chart-section">
            <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;">
                <h3 style="color: #00d4aa; margin: 0;">📈 Gráfico SOLANA/USDT - Últimas 336 Horas</h3>
                <div style="display: flex; gap: 10px;">
                    <button onclick="resetZoom()" class="secondary" style="padding: 5px 10px; font-size: 0.8em;">Reset Zoom</button>
                    <button onclick="loadMoreHistory()" class="secondary" style="padding: 5px 10px; font-size: 0.8em;">Carregar Mais</button>
                </div>
            </div>
            <div id="chart">
                <canvas id="priceChart"></canvas>
            </div>
            <div style="margin-top: 10px; font-size: 0.8em; color: #999; text-align: center;">
                💡 Use Ctrl + Scroll para zoom | Arraste para navegar | Scroll do mouse para zoom
            </div>
        </div>
        
        <div class="controls-section">
            <div class="tabs">
                <div class="tab active" onclick="switchTab('config')">Configuração</div>
                <div class="tab" onclick="switchTab('simulation')">Simulação</div>
                <div class="tab" onclick="switchTab('optimization')">Otimização</div>
            </div>
            
            <!-- TAB CONFIG -->
            <div id="tab-config" class="tab-content active">
                <div class="control-group">
                    <h3>⚙️ Configurações do Indicador</h3>
                    <div class="control-row">
                        <label>Sensibilidade (Threshold):</label>
                        <input type="range" id="threshold" min="1" max="10" value="5">
                        <span id="threshold-value">5</span>
                    </div>
                    <div class="control-row">
                        <label>RSI Período (IFR):</label>
                        <input type="number" id="rsi-length" value="5" min="5" max="50">
                    </div>
                    <div class="control-row">
                        <label>EMA Rápida:</label>
                        <input type="number" id="ema-fast" value="9" min="5" max="30">
                    </div>
                    <div class="control-row">
                        <label>EMA Lenta:</label>
                        <input type="number" id="ema-slow" value="30" min="15" max="50">
                    </div>
                    <div class="control-row">
                        <label>Bollinger Length:</label>
                        <input type="number" id="bollinger-length" value="22" min="10" max="50">
                    </div>
                    <div class="control-row">
                        <label>Ichimoku Conversion:</label>
                        <input type="number" id="ichimoku-conversion" value="11" min="5" max="20">
                    </div>
                    <div class="control-row">
                        <label>Ichimoku Base:</label>
                        <input type="number" id="ichimoku-base" value="26" min="15" max="50">
                    </div>
                    <div class="control-row">
                        <label>Volume Mínimo (USD):</label>
                        <input type="number" id="min-volume" value="50000000" step="1000000">
                    </div>
                </div>
                
                <div class="control-group">
                    <h3>🔔 Alertas de Preço</h3>
                    <div class="control-row">
                        <label>Preço para Alerta:</label>
                        <input type="number" id="alert-price" step="0.01" placeholder="Ex: 150.00">
                    </div>
                    <div class="control-row-inline">
                        <button onclick="addPriceAlert()">Adicionar</button>
                        <button onclick="clearAlerts()" class="danger">Limpar</button>
                    </div>
                    <div id="active-alerts"></div>
                </div>
                
                <div class="control-group">
                    <h3>📊 Indicadores Atuais</h3>
                    <div class="indicator-values" id="indicator-values">
                        <div class="indicator-item">
                            <div class="indicator-label">RSI</div>
                            <div class="indicator-value" id="rsi-value">--</div>
                        </div>
                        <div class="indicator-item">
                            <div class="indicator-label">MACD</div>
                            <div class="indicator-value" id="macd-value">--</div>
                        </div>
                        <div class="indicator-item">
                            <div class="indicator-label">Stoch</div>
                            <div class="indicator-value" id="stoch-value">--</div>
                        </div>
                        <div class="indicator-item">
                            <div class="indicator-label">Score</div>
                            <div class="indicator-value" id="score-value">--</div>
                        </div>
                    </div>
                </div>
                
                <div class="control-group">
                    <h3>📈 Histórico de Sinais</h3>
                    <div class="signal-history" id="signal-history">
                        <div class="loading">Aguardando sinais...</div>
                    </div>
                </div>
                
                <div class="control-group">
                    <h3>📊 Performance</h3>
                    <div class="performance-metrics" id="performance-metrics">
                        <div class="metric-row">
                            <span class="metric-label">Total de Sinais:</span>
                            <span class="metric-value" id="total-signals">0</span>
                        </div>
                        <div class="metric-row">
                            <span class="metric-label">Sinais LONG:</span>
                            <span class="metric-value metric-positive" id="long-signals">0</span>
                        </div>
                        <div class="metric-row">
                            <span class="metric-label">Sinais SHORT:</span>
                            <span class="metric-value metric-negative" id="short-signals">0</span>
                        </div>
                        <div class="metric-row">
                            <span class="metric-label">Último Sinal:</span>
                            <span class="metric-value" id="last-signal">--</span>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- TAB SIMULATION -->
            <div id="tab-simulation" class="tab-content">
                <div class="control-group">
                    <h3>💰 Configurações da Simulação</h3>
                    <div class="control-row">
                        <label>Capital Inicial (USDT):</label>
                        <input type="number" id="initial-bankroll" value="1000" step="100">
                    </div>
                    <div class="control-row">
                        <label>Risco por Trade (%):</label>
                        <input type="number" id="risk-per-trade" value="10" step="1" min="1" max="100">
                    </div>
                    <div class="control-row">
                        <label>Alavancagem:</label>
                        <input type="number" id="leverage" value="10" step="1" min="1" max="100">
                    </div>
                    <div class="control-row">
                        <label>Comissão (%):</label>
                        <input type="number" id="fees" value="0" step="0.01" min="0" max="1">
                    </div>
                    <div class="control-row">
                        <label>Stop Loss (%):</label>
                        <input type="number" id="stop-loss" value="50" step="5" min="10" max="200">
                    </div>
                    <div class="control-row">
                        <label>Take Profit (%):</label>
                        <input type="number" id="take-profit" value="100" step="5" min="10" max="300">
                    </div>
                    <div class="control-row">
                        <button onclick="runSimulation()">Executar Simulação</button>
                    </div>
                </div>
                
                <div id="simulation-results" class="simulation-results" style="display: none;">
                    <h4>Resultados da Simulação</h4>
                    <div id="simulation-summary"></div>
                    <table class="trade-table" id="simulation-table">
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Tipo</th>
                                <th>Entrada</th>
                                <th>Saída</th>
                                <th>P/L (%)</th>
                                <th>P/L (USD)</th>
                                <th>Razão</th>
                            </tr>
                        </thead>
                        <tbody id="simulation-tbody">
                        </tbody>
                    </table>
                </div>
            </div>
            
            <!-- TAB OPTIMIZATION -->
            <div id="tab-optimization" class="tab-content">
                <div class="control-group">
                    <h3>🔧 Otimização de Parâmetros</h3>
                    <div class="optimization-grid">
                        <div>
                            <label>Alavancagem (min,max,step):</label>
                            <input type="text" id="opt-leverage" value="5,30,5" placeholder="5,30,5">
                        </div>
                        <div>
                            <label>Risco % (min,max,step):</label>
                            <input type="text" id="opt-risk" value="5,20,2.5" placeholder="5,20,2.5">
                        </div>
                        <div>
                            <label>Stop Loss % (min,max,step):</label>
                            <input type="text" id="opt-sl" value="20,150,10" placeholder="20,150,10">
                        </div>
                        <div>
                            <label>Take Profit % (min,max,step):</label>
                            <input type="text" id="opt-tp" value="50,300,25" placeholder="50,300,25">
                        </div>
                    </div>
                    <div class="control-row">
                        <button onclick="runOptimization()">Iniciar Otimização</button>
                        <button onclick="downloadOptimizationResults()" class="secondary">Baixar Resultados</button>
                    </div>
                </div>
                
                <div id="optimization-progress" style="display: none;">
                    <div class="loading">Otimizando parâmetros...</div>
                    <div id="progress-text">0%</div>
                </div>
                
                <div id="optimization-results" class="simulation-results" style="display: none;">
                    <h4>Resultados da Otimização</h4>
                    <table class="trade-table" id="optimization-table">
                        <thead>
                            <tr>
                                <th>Alavancagem</th>
                                <th>Risco (%)</th>
                                <th>SL ROI (%)</th>
                                <th>TP ROI (%)</th>
                                <th>P/L Total (%)</th>
                                <th>Win Rate (%)</th>
                                <th>Payoff</th>
                            </tr>
                        </thead>
                        <tbody id="optimization-tbody">
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal Python removido - Agora tudo é unificado no painel principal -->

    <script>
        // Configurações globais
        const SYMBOL = 'SOLUSDT';
        const INTERVAL = '5m';
        const UPDATE_INTERVAL = 1000; // 1 segundo
        
        // Estado da aplicação
        let chart = null;
        let currentData = [];
        let indicators = {};
        let signals = [];
        let alertPrices = [];
        let lastSignal = 0;
        let simulationResults = [];
        let optimizationResults = [];
        let historicalSignals = []; // Para armazenar sinais históricos
        let performanceStats = {
            totalSignals: 0,
            longSignals: 0,
            shortSignals: 0
        };

        // Configurações do Indicador Python (baseadas nas imagens do TradingView)
        let pythonIndicatorConfig = {
            threshold: 5,            // Threshold balanceado para precisão TradingView
            rsiPeriod: 5,            // Período IFR = 5
            emaFast: 9,              // EMA Rápida = 9
            emaSlow: 30,             // EMA Lenta = 30
            bbPeriod: 22,            // Bollinger Length = 22
            bbStd: 2,
            ichimokuConversion: 11,  // Ichimoku Conversion = 11
            ichimokuBase: 26,        // Ichimoku Base = 26
            ichimokuSpan: 52,
            macdFast: 12,
            macdSlow: 26,
            macdSignal: 9,
            volumeMA: 20,
            minVolumeUSD: 50000000,  // Volume Mínimo USD = 50000000
            enabled: true            // Habilitado por padrão
        };
        
        // Som para alertas
        const alertSound = new Audio('data:audio/wav;base64,UklGRnoGAABXQVZFZm10IBAAAAABAAEAQB8AAEAfAAABAAgAZGF0YQoGAACBhYqFbF1fdJivrJBhNjVgodDbq2EcBj+a2/LDciUFLIHO8tiJNwgZaLvt559NEAxQp+PwtmMcBjiR1/LMeSwFJHfH8N2QQAoUXrTp66hVFApGn+DyvmwlBjKS2PS5dh4CLIzS8rWJOgkNbMbQ0oIvBjyRz+vVgjIAOWg+7RuShgdkOGh8z7WFUzA5ajzsCoMgBhQqZ4rSuXOGWTEOu+LW9CYNINJcCNsVfKmJ6CtYFR4yP68foBZzZhMxYxS4VgWH2j4fWLcPWKUCWZZKm+EBKhMzKkZIxgNfbBMhBCaV2QFfb9FYEZmOJbkHLJjDj1YYCh1gJLJLKWJGjgxjOQSLr6o4RwSQNYoQ2IQGXdMJL4X0y0YgXWb+n8fGMR4HgZC5s9U1EQQYd4nY74Js11iCl2zCKP5JEqfP3aRzaZgFfXQzLKkGGqS7s+x8qLAQyqJJG3YKW3qC1rykLO5WGazN8cBzFLJEo9RkOWlcBL7u4Bpma3Q/0+YFqDMRHDDKqxuqkOAKXkYNL6nGk+IGFR6O9gI9yJzQ3+PEXlYmGqJ8yREE3xtX8+rFY1MYMJWAWKi4VxkOYuEOdQaOOOqNdOF+xVZE4Wh8sQ0aHl7Qqow9FZFMR7NVKwUbwFQOQYrTXfCNjGHhbzrJeLR5PLH3I4KJQ+xbL3Y8y5lN1Vg6F9aGqHQbqpKz5zC5KQzwK3NqJZkTHuCJqmVlLwDQHfnmJeAYw1ykGhL3+c8SZjHPYDlhJ8VvkOG1nK5nKxj3Jm4NLMI0');
        
        // Inicialização
        document.addEventListener('DOMContentLoaded', function() {
            // Definir valores padrão antes de inicializar
            document.getElementById('threshold-value').textContent = '3';
            
            initializeChart();
            setupEventListeners();
            startDataUpdates();
        });
        
        function initializeChart() {
            const ctx = document.getElementById('priceChart').getContext('2d');
            
            chart = new Chart(ctx, {
                type: 'line',
                data: {
                    datasets: [{
                        label: 'SOLANA/USDT',
                        data: [],
                        borderColor: '#00d4aa',
                        backgroundColor: 'rgba(0, 212, 170, 0.1)',
                        borderWidth: 2,
                        tension: 0.1,
                        pointRadius: 0, // Remove pontos para melhor performance
                        pointHoverRadius: 4
                    }, {
                        label: 'Sinais LONG',
                        data: [],
                        backgroundColor: '#00d4aa',
                        borderColor: '#00d4aa',
                        pointStyle: 'triangle',
                        pointRadius: 10,
                        showLine: false,
                        pointHoverRadius: 12
                    }, {
                        label: 'Sinais SHORT',
                        data: [],
                        backgroundColor: '#ff6b35',
                        borderColor: '#ff6b35',
                        pointStyle: 'triangle',
                        pointRadius: 10,
                        rotation: 180, // Triângulo invertido para SHORT
                        showLine: false,
                        pointHoverRadius: 12
                    }, {
                        label: 'Python LONG',
                        data: [],
                        backgroundColor: '#3776ab',
                        borderColor: '#3776ab',
                        pointStyle: 'rectRot',
                        pointRadius: 12,
                        showLine: false,
                        pointHoverRadius: 15
                    }, {
                        label: 'Python SHORT',
                        data: [],
                        backgroundColor: '#ffd43b',
                        borderColor: '#ffd43b',
                        pointStyle: 'rectRot',
                        pointRadius: 12,
                        showLine: false,
                        pointHoverRadius: 15
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    interaction: {
                        mode: 'index',
                        intersect: false,
                    },
                    scales: {
                        x: {
                            type: 'time',
                            time: {
                                unit: 'hour',
                                displayFormats: {
                                    hour: 'MMM dd HH:mm',
                                    day: 'MMM dd',
                                    week: 'MMM dd',
                                    month: 'MMM yyyy'
                                }
                            },
                            grid: {
                                color: '#1e1e1e'
                            },
                            ticks: {
                                color: '#ffffff',
                                maxTicksLimit: 10
                            }
                        },
                        y: {
                            grid: {
                                color: '#1e1e1e'
                            },
                            ticks: {
                                color: '#ffffff',
                                callback: function(value) {
                                    return '$' + value.toFixed(4);
                                }
                            }
                        }
                    },
                    plugins: {
                        legend: {
                            labels: {
                                color: '#ffffff'
                            }
                        },
                        zoom: {
                            pan: {
                                enabled: true,
                                mode: 'x',
                                modifierKey: 'ctrl',
                            },
                            zoom: {
                                wheel: {
                                    enabled: true,
                                },
                                pinch: {
                                    enabled: true
                                },
                                mode: 'x',
                            }
                        },
                        tooltip: {
                            mode: 'index',
                            intersect: false,
                            callbacks: {
                                title: function(tooltipItems) {
                                    return new Date(tooltipItems[0].parsed.x).toLocaleString();
                                },
                                label: function(context) {
                                    if (context.datasetIndex === 0) {
                                        return `Preço: $${context.parsed.y.toFixed(4)}`;
                                    } else if (context.datasetIndex === 1) {
                                        const signal = historicalSignals.find(s => 
                                            Math.abs(new Date(s.timestamp).getTime() - context.parsed.x) < 300000 && s.type === 'LONG'
                                        );
                                        return `🟢 LONG @ $${context.parsed.y.toFixed(4)} (Score: ${signal ? signal.score : 'N/A'})`;
                                    } else if (context.datasetIndex === 2) {
                                        const signal = historicalSignals.find(s => 
                                            Math.abs(new Date(s.timestamp).getTime() - context.parsed.x) < 300000 && s.type === 'SHORT'
                                        );
                                        return `🔴 SHORT @ $${context.parsed.y.toFixed(4)} (Score: ${signal ? signal.score : 'N/A'})`;
                                    } else if (context.datasetIndex === 3) {
                                        return `🐍 Python LONG @ $${context.parsed.y.toFixed(4)}`;
                                    } else if (context.datasetIndex === 4) {
                                        return `🐍 Python SHORT @ $${context.parsed.y.toFixed(4)}`;
                                    }
                                }
                            }
                        }
                    },
                    animation: false
                }
            });
        }
        
        function setupEventListeners() {
            document.getElementById('threshold').addEventListener('input', function() {
                document.getElementById('threshold-value').textContent = this.value;
                // Atualizar configuração Python com novo threshold
                pythonIndicatorConfig.threshold = parseInt(this.value);
                // Recalcular sinais quando threshold mudar
                if (currentData.length > 0) {
                    updateChartWithHistoricalSignals(currentData);
                }
            });
            
            // Conectar todos os parâmetros ao pythonIndicatorConfig
            document.getElementById('rsi-length').addEventListener('change', function() {
                pythonIndicatorConfig.rsiPeriod = parseInt(this.value);
                if (currentData.length > 0) {
                    setTimeout(() => updateChartWithHistoricalSignals(currentData), 100);
                }
            });
            
            document.getElementById('ema-fast').addEventListener('change', function() {
                pythonIndicatorConfig.emaFast = parseInt(this.value);
                if (currentData.length > 0) {
                    setTimeout(() => updateChartWithHistoricalSignals(currentData), 100);
                }
            });
            
            document.getElementById('ema-slow').addEventListener('change', function() {
                pythonIndicatorConfig.emaSlow = parseInt(this.value);
                if (currentData.length > 0) {
                    setTimeout(() => updateChartWithHistoricalSignals(currentData), 100);
                }
            });
            
            document.getElementById('min-volume').addEventListener('change', function() {
                pythonIndicatorConfig.minVolumeUSD = parseInt(this.value);
                if (currentData.length > 0) {
                    setTimeout(() => updateChartWithHistoricalSignals(currentData), 100);
                }
            });
            
            document.getElementById('bollinger-length').addEventListener('change', function() {
                pythonIndicatorConfig.bbPeriod = parseInt(this.value);
                if (currentData.length > 0) {
                    setTimeout(() => updateChartWithHistoricalSignals(currentData), 100);
                }
            });
            
            document.getElementById('ichimoku-conversion').addEventListener('change', function() {
                pythonIndicatorConfig.ichimokuConversion = parseInt(this.value);
                if (currentData.length > 0) {
                    setTimeout(() => updateChartWithHistoricalSignals(currentData), 100);
                }
            });
            
            document.getElementById('ichimoku-base').addEventListener('change', function() {
                pythonIndicatorConfig.ichimokuBase = parseInt(this.value);
                if (currentData.length > 0) {
                    setTimeout(() => updateChartWithHistoricalSignals(currentData), 100);
                }
            });
        }
        
        function switchTab(tabName) {
            // Remove active class from all tabs and contents
            document.querySelectorAll('.tab').forEach(tab => tab.classList.remove('active'));
            document.querySelectorAll('.tab-content').forEach(content => content.classList.remove('active'));
            
            // Add active class to selected tab and content
            event.target.classList.add('active');
            document.getElementById(`tab-${tabName}`).classList.add('active');
        }

        // Python Indicator Modal Functions
        function openPythonIndicatorModal() {
            // Carregar configurações atuais no modal
            document.getElementById('python-threshold-display').textContent = pythonIndicatorConfig.threshold;
            document.getElementById('python-threshold-long').textContent = pythonIndicatorConfig.threshold;
            document.getElementById('python-threshold-short').textContent = -pythonIndicatorConfig.threshold;
            document.getElementById('python-rsi-period').value = pythonIndicatorConfig.rsiPeriod;
            document.getElementById('python-ema-fast').value = pythonIndicatorConfig.emaFast;
            document.getElementById('python-ema-slow').value = pythonIndicatorConfig.emaSlow;
            document.getElementById('python-bb-period').value = pythonIndicatorConfig.bbPeriod;
            document.getElementById('python-bb-std').value = pythonIndicatorConfig.bbStd;
            document.getElementById('python-ichimoku-conversion').value = pythonIndicatorConfig.ichimokuConversion;
            document.getElementById('python-ichimoku-base').value = pythonIndicatorConfig.ichimokuBase;
            document.getElementById('python-ichimoku-span').value = pythonIndicatorConfig.ichimokuSpan;
            document.getElementById('python-macd-fast').value = pythonIndicatorConfig.macdFast;
            document.getElementById('python-macd-slow').value = pythonIndicatorConfig.macdSlow;
            document.getElementById('python-macd-signal').value = pythonIndicatorConfig.macdSignal;
            document.getElementById('python-volume-ma').value = pythonIndicatorConfig.volumeMA;

            document.getElementById('pythonIndicatorModal').style.display = 'block';
        }

        function closePythonIndicatorModal() {
            document.getElementById('pythonIndicatorModal').style.display = 'none';
        }

        function adjustPythonThreshold(delta) {
            const newThreshold = Math.max(1, Math.min(10, pythonIndicatorConfig.threshold + delta));
            pythonIndicatorConfig.threshold = newThreshold;
            document.getElementById('python-threshold-display').textContent = newThreshold;
            document.getElementById('python-threshold-long').textContent = newThreshold;
            document.getElementById('python-threshold-short').textContent = -newThreshold;
        }

        function resetPythonIndicatorDefaults() {
            pythonIndicatorConfig = {
                threshold: 3,
                rsiPeriod: 5,        // Período IFR = 5
                emaFast: 9,          // EMA Rápida = 9
                emaSlow: 30,         // EMA Lenta = 30
                bbPeriod: 22,        // Bollinger Length = 22
                bbStd: 2,
                ichimokuConversion: 11,  // Ichimoku Conversion = 11
                ichimokuBase: 26,        // Ichimoku Base = 26
                ichimokuSpan: 52,
                macdFast: 12,
                macdSlow: 26,
                macdSignal: 9,
                volumeMA: 20,
                minVolumeUSD: 50000000,  // Volume Mínimo USD = 50000000
                enabled: true
            };
            openPythonIndicatorModal(); // Recarregar o modal com os valores padrão
        }

        function applyPythonIndicatorSettings() {
            // Capturar todas as configurações do modal
            pythonIndicatorConfig.rsiPeriod = parseInt(document.getElementById('python-rsi-period').value);
            pythonIndicatorConfig.emaFast = parseInt(document.getElementById('python-ema-fast').value);
            pythonIndicatorConfig.emaSlow = parseInt(document.getElementById('python-ema-slow').value);
            pythonIndicatorConfig.bbPeriod = parseInt(document.getElementById('python-bb-period').value);
            pythonIndicatorConfig.bbStd = parseFloat(document.getElementById('python-bb-std').value);
            pythonIndicatorConfig.ichimokuConversion = parseInt(document.getElementById('python-ichimoku-conversion').value);
            pythonIndicatorConfig.ichimokuBase = parseInt(document.getElementById('python-ichimoku-base').value);
            pythonIndicatorConfig.ichimokuSpan = parseInt(document.getElementById('python-ichimoku-span').value);
            pythonIndicatorConfig.macdFast = parseInt(document.getElementById('python-macd-fast').value);
            pythonIndicatorConfig.macdSlow = parseInt(document.getElementById('python-macd-slow').value);
            pythonIndicatorConfig.macdSignal = parseInt(document.getElementById('python-macd-signal').value);
            pythonIndicatorConfig.volumeMA = parseInt(document.getElementById('python-volume-ma').value);
            pythonIndicatorConfig.enabled = true;

            // Fechar modal
            closePythonIndicatorModal();

            // Recalcular sinais com as novas configurações
            if (currentData.length > 0) {
                updateChartWithPythonIndicator(currentData);
            }

            // Mostrar mensagem de sucesso
            const successDiv = document.createElement('div');
            successDiv.className = 'success';
            successDiv.innerHTML = '🐍 Indicador Python aplicado com sucesso!';
            document.querySelector('.controls-section').insertBefore(successDiv, document.querySelector('.tabs'));
            
            setTimeout(() => {
                successDiv.remove();
            }, 3000);
        }

        // Fechar modal ao clicar fora dele
        window.onclick = function(event) {
            const modal = document.getElementById('pythonIndicatorModal');
            if (event.target === modal) {
                closePythonIndicatorModal();
            }
        }
        
        // Função para gerar dados de demonstração realistas
        function generateDemoData(hours = 336) {
            const candlesNeeded = Math.ceil(hours * 12);
            const data = [];
            const now = Date.now();
            const fiveMinutes = 5 * 60 * 1000;
            
            let basePrice = 148.32; // Preço inicial similar ao SOL
            let trend = 0;
            
            for (let i = 0; i < candlesNeeded; i++) {
                const timestamp = new Date(now - (candlesNeeded - i) * fiveMinutes);
                
                // Gerar movimento de preço realista
                const volatility = 0.002 + Math.random() * 0.008; // 0.2% a 1% de volatilidade
                const trendChange = (Math.random() - 0.5) * 0.001;
                trend += trendChange;
                trend = Math.max(-0.01, Math.min(0.01, trend)); // Limitar trend
                
                const priceChange = (Math.random() - 0.5) * volatility + trend;
                const open = basePrice;
                const close = open * (1 + priceChange);
                
                const high = Math.max(open, close) * (1 + Math.random() * 0.003);
                const low = Math.min(open, close) * (1 - Math.random() * 0.003);
                
                const volume = 800000 + Math.random() * 2000000; // Volume realista
                
                data.push({
                    time: timestamp,
                    open: parseFloat(open.toFixed(4)),
                    high: parseFloat(high.toFixed(4)),
                    low: parseFloat(low.toFixed(4)),
                    close: parseFloat(close.toFixed(4)),
                    volume: parseFloat(volume.toFixed(0))
                });
                
                basePrice = close;
            }
            
            return data;
        }
        
        async function fetchKlineData(hours = 336) {
            try {
                // Calcular quantas velas precisamos para as horas solicitadas
                // Para 5m: 1 hora = 12 velas, então 336 horas = 4032 velas
                const candlesNeeded = Math.ceil(hours * 12);
                const maxLimit = 1000; // Limite máximo da API Binance por requisição
                
                let allData = [];
                let endTime = Date.now();
                
                // Se precisarmos de mais de 1000 velas, fazer múltiplas requisições
                while (allData.length < candlesNeeded) {
                    const limit = Math.min(maxLimit, candlesNeeded - allData.length);
                    
                    const response = await fetch(
                        `https://api.binance.com/api/v3/klines?symbol=${SYMBOL}&interval=${INTERVAL}&limit=${limit}&endTime=${endTime}`
                    );
                    
                    if (!response.ok) throw new Error('Falha na requisição');
                    
                    const data = await response.json();
                    
                    if (data.length === 0) break; // Não há mais dados
                    
                    // Adicionar dados no início do array (dados mais antigos primeiro)
                    allData = data.concat(allData);
                    
                    // Atualizar endTime para a próxima requisição (pegar dados mais antigos)
                    endTime = data[0][0] - 1;
                }
                
                return allData.map(kline => ({
                    time: new Date(kline[0]),
                    open: parseFloat(kline[1]),
                    high: parseFloat(kline[2]),
                    low: parseFloat(kline[3]),
                    close: parseFloat(kline[4]),
                    volume: parseFloat(kline[5])
                }));
            } catch (error) {
                console.error('Erro ao buscar dados:', error);
                // Fallback para buscar apenas 200 velas se houver erro
                try {
                    const response = await fetch(`https://api.binance.com/api/v3/klines?symbol=${SYMBOL}&interval=${INTERVAL}&limit=200`);
                    const data = await response.json();
                    return data.map(kline => ({
                        time: new Date(kline[0]),
                        open: parseFloat(kline[1]),
                        high: parseFloat(kline[2]),
                        low: parseFloat(kline[3]),
                        close: parseFloat(kline[4]),
                        volume: parseFloat(kline[5])
                    }));
                } catch (fallbackError) {
                    console.error('Erro no fallback:', fallbackError);
                    
                    // Usar dados de demonstração como último recurso
                    console.log('Usando dados de demonstração');
                    return generateDemoData(hours);
                }
            }
        }
        
        async function fetch24hStats() {
            try {
                const response = await fetch(`https://api.binance.com/api/v3/ticker/24hr?symbol=${SYMBOL}`);
                if (!response.ok) throw new Error('Falha na requisição');
                
                const data = await response.json();
                
                const priceChange = parseFloat(data.priceChangePercent);
                const priceElement = document.getElementById('price-change');
                priceElement.textContent = `${priceChange >= 0 ? '+' : ''}${priceChange.toFixed(2)}%`;
                priceElement.className = priceChange >= 0 ? 'price-up' : 'price-down';
                
            } catch (error) {
                console.error('Erro ao buscar estatísticas 24h:', error);
                // Usar dados de demonstração para 24h stats
                const priceElement = document.getElementById('price-change');
                const randomChange = (Math.random() - 0.5) * 10; // -5% a +5%
                priceElement.textContent = `${randomChange >= 0 ? '+' : ''}${randomChange.toFixed(2)}%`;
                priceElement.className = randomChange >= 0 ? 'price-up' : 'price-down';
            }
        }

        // Implementação exata do indicador Python - Versão TradingView Precision
        function computeTradingSignals(candlesData) {
            if (!candlesData || candlesData.length < Math.max(pythonIndicatorConfig.ichimokuSpan, pythonIndicatorConfig.bbPeriod) + 10) {
                return [];
            }

            const df = candlesData.map(candle => ({
                open: candle.open,
                high: candle.high,
                low: candle.low,
                close: candle.close,
                volume: candle.volume,
                time: candle.time
            }));

            // RSI (5)
            const closes = df.map(d => d.close);
            const highs = df.map(d => d.high);
            const lows = df.map(d => d.low);
            const volumes = df.map(d => d.volume);

            const rsi = calculateRSIPython(closes, pythonIndicatorConfig.rsiPeriod);
            
            // Bollinger Bands (22, 2)
            const bbMid = calculateSMAPython(closes, pythonIndicatorConfig.bbPeriod);
            const bbStd = calculateStdPython(closes, pythonIndicatorConfig.bbPeriod);
            const bbUpper = bbMid.map((mid, i) => mid + pythonIndicatorConfig.bbStd * bbStd[i]);
            const bbLower = bbMid.map((mid, i) => mid - pythonIndicatorConfig.bbStd * bbStd[i]);

            // EMAs (9, 30)
            const ema9 = calculateEMAPython(closes, pythonIndicatorConfig.emaFast);
            const ema30 = calculateEMAPython(closes, pythonIndicatorConfig.emaSlow);

            // Ichimoku (11,26,52)
            const tenkan = calculateIchimokuLine(highs, lows, pythonIndicatorConfig.ichimokuConversion);
            const kijun = calculateIchimokuLine(highs, lows, pythonIndicatorConfig.ichimokuBase);
            const senkouSpanA = tenkan.map((t, i) => i >= pythonIndicatorConfig.ichimokuBase ? (t + kijun[i]) / 2 : null);
            const senkouSpanB = calculateIchimokuLine(highs, lows, pythonIndicatorConfig.ichimokuSpan)
                .map((val, i) => i >= pythonIndicatorConfig.ichimokuBase ? val : null);

            // MACD (12,26,9)
            const ema12 = calculateEMAPython(closes, pythonIndicatorConfig.macdFast);
            const ema26 = calculateEMAPython(closes, pythonIndicatorConfig.macdSlow);
            const macd = ema12.map((fast, i) => fast - ema26[i]);
            const macdSignal = calculateEMAPython(macd, pythonIndicatorConfig.macdSignal);

            // Volume (média móvel 20)
            const volMa20 = calculateSMAPython(volumes, pythonIndicatorConfig.volumeMA);

            // Calcular sinais com filtros rigorosos para precisão TradingView
            const signals = [];
            let lastSignalType = 0; // 0 = nenhum, 1 = LONG, -1 = SHORT
            let lastSignalIndex = -1; // Index do último sinal
            const minDistanceBetweenSignals = 8; // Mínimo de 8 candles entre sinais (40min em 5min)
            
            for (let i = Math.max(pythonIndicatorConfig.ichimokuSpan, pythonIndicatorConfig.bbPeriod); i < df.length; i++) {
                let score = 0;
                let confirmationFactors = 0; // Contador de fatores de confirmação
                const currentPrice = closes[i];

                // RSI: condições mais restritivas (extremos mais acentuados)
                if (rsi[i] !== undefined) {
                    if (rsi[i] < 25) { // Mais restritivo que 30
                        score += 2; // Peso maior
                        confirmationFactors++;
                    } else if (rsi[i] > 75) { // Mais restritivo que 70
                        score -= 2; // Peso maior
                        confirmationFactors++;
                    }
                }

                // Bollinger: apenas em extremos + confirmação de reversão
                if (bbLower[i] !== undefined && bbUpper[i] !== undefined) {
                    const bbRange = bbUpper[i] - bbLower[i];
                    const bbPosition = (currentPrice - bbLower[i]) / bbRange;
                    
                    // Só sinaliza em extremos muito acentuados
                    if (bbPosition < 0.05) { // Preço nos 5% inferiores da banda
                        score += 2;
                        confirmationFactors++;
                    } else if (bbPosition > 0.95) { // Preço nos 5% superiores da banda
                        score -= 2;
                        confirmationFactors++;
                    }
                }

                // EMAs: confirmação de tendência forte
                if (ema9[i] !== undefined && ema30[i] !== undefined) {
                    const emaDiff = Math.abs(ema9[i] - ema30[i]) / ema30[i];
                    
                    // Só conta se a diferença for significativa (> 0.5%)
                    if (emaDiff > 0.005) {
                        if (ema9[i] > ema30[i]) {
                            score += 1;
                            confirmationFactors++;
                        } else if (ema9[i] < ema30[i]) {
                            score -= 1;
                            confirmationFactors++;
                        }
                    }
                }

                // Ichimoku: posição clara em relação à nuvem + confirmação de momentum
                if (senkouSpanA[i] !== null && senkouSpanB[i] !== null && tenkan[i] !== undefined && kijun[i] !== undefined) {
                    const topCloud = Math.max(senkouSpanA[i], senkouSpanB[i]);
                    const bottomCloud = Math.min(senkouSpanA[i], senkouSpanB[i]);
                    const cloudThickness = topCloud - bottomCloud;
                    const priceCloudDistance = Math.min(Math.abs(currentPrice - topCloud), Math.abs(currentPrice - bottomCloud));
                    
                    // Só conta se o preço estiver claramente fora da nuvem (> 0.3% da espessura)
                    if (priceCloudDistance > cloudThickness * 0.003) {
                        if (currentPrice > topCloud && tenkan[i] > kijun[i]) {
                            score += 2;
                            confirmationFactors++;
                        } else if (currentPrice < bottomCloud && tenkan[i] < kijun[i]) {
                            score -= 2;
                            confirmationFactors++;
                        }
                    }
                }

                // MACD: cruzamento confirmado + divergência significativa
                if (macd[i] !== undefined && macdSignal[i] !== undefined && i > 0 && 
                    macd[i-1] !== undefined && macdSignal[i-1] !== undefined) {
                    
                    const macdDiff = Math.abs(macd[i] - macdSignal[i]);
                    const prevMacdDiff = Math.abs(macd[i-1] - macdSignal[i-1]);
                    
                    // Cruzamento recente com divergência crescente
                    if (macdDiff > prevMacdDiff * 1.1) { // Divergência crescente em 10%
                        if (macd[i] > macdSignal[i] && macd[i-1] <= macdSignal[i-1]) {
                            score += 2; // Cruzamento bullish
                            confirmationFactors++;
                        } else if (macd[i] < macdSignal[i] && macd[i-1] >= macdSignal[i-1]) {
                            score -= 2; // Cruzamento bearish
                            confirmationFactors++;
                        }
                    }
                }

                // Volume: confirmação de força (apenas em volumes excepcionais)
                if (volMa20[i] !== undefined) {
                    if (volumes[i] > 2.0 * volMa20[i]) { // Volume > 2x média (mais restritivo)
                        score += Math.sign(score) * 1; // Amplifica o sinal existente
                        confirmationFactors++;
                    }
                }

                // Filtros adicionais para precisão TradingView
                const hasEnoughConfirmation = confirmationFactors >= 2; // Precisa de pelo menos 2 fatores
                const isEnoughTimeFromLastSignal = (lastSignalIndex === -1) || (i - lastSignalIndex >= minDistanceBetweenSignals);
                const hasStrongScore = Math.abs(score) >= pythonIndicatorConfig.threshold;

                // Decisão final: múltiplos filtros
                let longSignal = 0;
                let shortSignal = 0;
                
                if (hasStrongScore && hasEnoughConfirmation && isEnoughTimeFromLastSignal) {
                    if (score >= pythonIndicatorConfig.threshold && lastSignalType !== 1) {
                        // Validação adicional para LONG: tendência de reversão confirmada
                        const isOversold = rsi[i] < 30;
                        const isPriceBelowBB = currentPrice < bbLower[i];
                        const hasUptrendPotential = ema9[i] >= ema30[i] * 0.995; // EMA9 próxima ou acima da EMA30
                        
                        if (isOversold || isPriceBelowBB || hasUptrendPotential) {
                            longSignal = 1;
                            lastSignalType = 1;
                            lastSignalIndex = i;
                        }
                    } else if (score <= -pythonIndicatorConfig.threshold && lastSignalType !== -1) {
                        // Validação adicional para SHORT: tendência de reversão confirmada
                        const isOverbought = rsi[i] > 70;
                        const isPriceAboveBB = currentPrice > bbUpper[i];
                        const hasDowntrendPotential = ema9[i] <= ema30[i] * 1.005; // EMA9 próxima ou abaixo da EMA30
                        
                        if (isOverbought || isPriceAboveBB || hasDowntrendPotential) {
                            shortSignal = 1;
                            lastSignalType = -1;
                            lastSignalIndex = i;
                        }
                    }
                }

                signals.push({
                    index: i,
                    time: df[i].time,
                    price: currentPrice,
                    score: score,
                    confirmationFactors: confirmationFactors,
                    longSignal: longSignal,
                    shortSignal: shortSignal,
                    rsi: rsi[i],
                    bbUpper: bbUpper[i],
                    bbLower: bbLower[i],
                    ema9: ema9[i],
                    ema30: ema30[i],
                    macd: macd[i],
                    macdSignal: macdSignal[i]
                });
            }

            return signals;
        }

        // Funções auxiliares para o indicador Python
        function calculateRSIPython(closes, period) {
            const rsi = [];
            const gains = [];
            const losses = [];
            
            for (let i = 1; i < closes.length; i++) {
                const change = closes[i] - closes[i - 1];
                gains.push(change > 0 ? change : 0);
                losses.push(change < 0 ? -change : 0);
            }
            
            // Preencher com undefined até ter dados suficientes
            for (let i = 0; i < period; i++) {
                rsi.push(undefined);
            }
            
            // Calcular RSI a partir do período mínimo
            for (let i = period - 1; i < gains.length; i++) {
                const avgGain = gains.slice(i - period + 1, i + 1).reduce((a, b) => a + b) / period;
                const avgLoss = losses.slice(i - period + 1, i + 1).reduce((a, b) => a + b) / period;
                const rs = avgLoss === 0 ? 100 : avgGain / avgLoss;
                rsi.push(100 - (100 / (1 + rs)));
            }
            
            return rsi;
        }

        function calculateSMAPython(data, period) {
            const sma = [];
            
            // Preencher com undefined até ter dados suficientes
            for (let i = 0; i < period - 1; i++) {
                sma.push(undefined);
            }
            
            for (let i = period - 1; i < data.length; i++) {
                const sum = data.slice(i - period + 1, i + 1).reduce((a, b) => a + b);
                sma.push(sum / period);
            }
            return sma;
        }

        function calculateStdPython(data, period) {
            const std = [];
            
            // Preencher com undefined até ter dados suficientes
            for (let i = 0; i < period - 1; i++) {
                std.push(undefined);
            }
            
            for (let i = period - 1; i < data.length; i++) {
                const slice = data.slice(i - period + 1, i + 1);
                const mean = slice.reduce((a, b) => a + b) / period;
                const variance = slice.reduce((acc, val) => acc + Math.pow(val - mean, 2), 0) / period;
                std.push(Math.sqrt(variance));
            }
            return std;
        }

        function calculateEMAPython(data, period) {
            const ema = [];
            const multiplier = 2 / (period + 1);
            
            // Primeiro valor é o primeiro preço
            ema[0] = data[0];
            
            for (let i = 1; i < data.length; i++) {
                if (data[i] !== undefined && ema[i - 1] !== undefined) {
                    ema[i] = (data[i] - ema[i - 1]) * multiplier + ema[i - 1];
                } else {
                    ema[i] = data[i];
                }
            }
            
            return ema;
        }

        function calculateIchimokuLine(highs, lows, period) {
            const line = [];
            
            // Preencher com undefined até ter dados suficientes
            for (let i = 0; i < period - 1; i++) {
                line.push(undefined);
            }
            
            for (let i = period - 1; i < highs.length; i++) {
                const highestHigh = Math.max(...highs.slice(i - period + 1, i + 1));
                const lowestLow = Math.min(...lows.slice(i - period + 1, i + 1));
                line.push((highestHigh + lowestLow) / 2);
            }
            
            return line;
        }

        function updateChartWithPythonIndicator(data) {
            if (!chart || !data.length || !pythonIndicatorConfig.enabled) return;

            // Limpar sinais Python existentes
            chart.data.datasets[3].data = []; // Python LONG
            chart.data.datasets[4].data = []; // Python SHORT

            // Calcular sinais do indicador Python
            const pythonSignals = computeTradingSignals(data);
            
            // Adicionar sinais ao gráfico
            pythonSignals.forEach(signal => {
                if (signal.longSignal === 1) {
                    chart.data.datasets[3].data.push({
                        x: signal.time,
                        y: signal.price * 0.996 // Posicionar ligeiramente abaixo
                    });
                } else if (signal.shortSignal === 1) {
                    chart.data.datasets[4].data.push({
                        x: signal.time,
                        y: signal.price * 1.004 // Posicionar ligeiramente acima
                    });
                }
            });

            chart.update('none');

            // Atualizar estatísticas
            const pythonLongCount = pythonSignals.filter(s => s.longSignal === 1).length;
            const pythonShortCount = pythonSignals.filter(s => s.shortSignal === 1).length;
            
            console.log(`Python Indicator: ${pythonLongCount} LONG, ${pythonShortCount} SHORT signals`);
        }
        
        function calculateIndicators(data) {
            if (data.length < 52) return null;
            
            const closes = data.map(d => d.close);
            const highs = data.map(d => d.high);
            const lows = data.map(d => d.low);
            const volumes = data.map(d => d.volume);
            const opens = data.map(d => d.open);
            
            // RSI
            const rsiPeriod = parseInt(document.getElementById('rsi-length').value);
            const rsi = calculateRSI(closes, rsiPeriod);
            const modifiedRsi = calculateEMA(rsi, 5);
            
            // MACD
            const macd = calculateMACD(closes);
            const macdMomentum = macd.macd[macd.macd.length - 1] - macd.signal[macd.signal.length - 1];
            
            // Stochastic Neural
            const stoch = calculateStochastic(highs, lows, closes, 14);
            const stochK = calculateSMA(stoch, 3);
            const stochD = calculateSMA(stochK, 3);
            const neuralStoch = 0.7 * stochK[stochK.length - 1] + 0.3 * stochD[stochD.length - 1];
            
            // EMA Crossover
            const emaFast = parseInt(document.getElementById('ema-fast').value);
            const emaSlow = parseInt(document.getElementById('ema-slow').value);
            const emaFastValues = calculateEMA(closes, emaFast);
            const emaSlowValues = calculateEMA(closes, emaSlow);
            const emaCross = emaFastValues[emaFastValues.length - 1] - emaSlowValues[emaSlowValues.length - 1];
            
            // Bollinger Bands
            const bollingerLength = parseInt(document.getElementById('bollinger-length').value);
            const bb = calculateBollingerBands(closes, bollingerLength, 2);
            const currentPrice = closes[closes.length - 1];
            let bollingerSignal = 0;
            if (currentPrice > bb.upper[bb.upper.length - 1]) bollingerSignal = -1;
            else if (currentPrice < bb.lower[bb.lower.length - 1]) bollingerSignal = 1;
            
            // Ichimoku
            const ichimokuConversion = parseInt(document.getElementById('ichimoku-conversion').value);
            const ichimokuBase = parseInt(document.getElementById('ichimoku-base').value);
            const ichimoku = calculateIchimoku(highs, lows, ichimokuConversion, ichimokuBase, 52);
            const cloudTop = Math.max(ichimoku.spanA[ichimoku.spanA.length - 1], ichimoku.spanB[ichimoku.spanB.length - 1]);
            const cloudBottom = Math.min(ichimoku.spanA[ichimoku.spanA.length - 1], ichimoku.spanB[ichimoku.spanB.length - 1]);
            let ichimokuSignal = 0;
            if (currentPrice > cloudTop) ichimokuSignal = 1;
            else if (currentPrice < cloudBottom) ichimokuSignal = -1;
            
            // Volume Signal
            const volumeMA = calculateSMA(volumes, 20);
            const currentVolume = volumes[volumes.length - 1];
            const currentOpen = opens[opens.length - 1];
            let volumeSignal = 0;
            if (currentVolume > volumeMA[volumeMA.length - 1]) {
                volumeSignal = currentPrice > currentOpen ? 1 : -1;
            }
            
            // Cálculo do Score
            let score = 0;
            score += macdMomentum > 0 ? 1 : macdMomentum < 0 ? -1 : 0;
            score += emaCross > 0 ? 1 : emaCross < 0 ? -1 : 0;
            score += neuralStoch < 20 ? 1 : neuralStoch > 80 ? -1 : 0;
            score += modifiedRsi[modifiedRsi.length - 1] < 35 ? 1 : modifiedRsi[modifiedRsi.length - 1] > 65 ? -1 : 0;
            score += bollingerSignal;
            score += ichimokuSignal;
            score += volumeSignal;
            
            return {
                rsi: rsi[rsi.length - 1],
                modifiedRsi: modifiedRsi[modifiedRsi.length - 1],
                macdMomentum,
                neuralStoch,
                score,
                emaCross,
                volumeUSD: currentVolume * currentPrice
            };
        }
        
        // Funções auxiliares para cálculo de indicadores
        function calculateRSI(closes, period) {
            const rsi = [];
            const gains = [];
            const losses = [];
            
            for (let i = 1; i < closes.length; i++) {
                const change = closes[i] - closes[i - 1];
                gains.push(change > 0 ? change : 0);
                losses.push(change < 0 ? -change : 0);
            }
            
            for (let i = period - 1; i < gains.length; i++) {
                const avgGain = gains.slice(i - period + 1, i + 1).reduce((a, b) => a + b) / period;
                const avgLoss = losses.slice(i - period + 1, i + 1).reduce((a, b) => a + b) / period;
                const rs = avgLoss === 0 ? 100 : avgGain / avgLoss;
                rsi.push(100 - (100 / (1 + rs)));
            }
            
            return rsi;
        }
        
        function calculateEMA(data, period) {
            const ema = [];
            const multiplier = 2 / (period + 1);
            ema[0] = data[0];
            
            for (let i = 1; i < data.length; i++) {
                ema[i] = (data[i] - ema[i - 1]) * multiplier + ema[i - 1];
            }
            
            return ema;
        }
        
        function calculateSMA(data, period) {
            const sma = [];
            for (let i = period - 1; i < data.length; i++) {
                const sum = data.slice(i - period + 1, i + 1).reduce((a, b) => a + b);
                sma.push(sum / period);
            }
            return sma;
        }
        
        function calculateMACD(closes) {
            const ema12 = calculateEMA(closes, 12);
            const ema26 = calculateEMA(closes, 26);
            const macd = [];
            
            for (let i = 0; i < ema12.length; i++) {
                macd.push(ema12[i] - ema26[i]);
            }
            
            const signal = calculateEMA(macd, 9);
            
            return { macd, signal };
        }
        
        function calculateStochastic(highs, lows, closes, period) {
            const stoch = [];
            
            for (let i = period - 1; i < closes.length; i++) {
                const highestHigh = Math.max(...highs.slice(i - period + 1, i + 1));
                const lowestLow = Math.min(...lows.slice(i - period + 1, i + 1));
                const currentClose = closes[i];
                
                const stochValue = ((currentClose - lowestLow) / (highestHigh - lowestLow)) * 100;
                stoch.push(stochValue || 0);
            }
            
            return stoch;
        }
        
        function calculateBollingerBands(closes, period, stdDev) {
            const sma = calculateSMA(closes, period);
            const upper = [];
            const lower = [];
            
            for (let i = period - 1; i < closes.length; i++) {
                const slice = closes.slice(i - period + 1, i + 1);
                const mean = slice.reduce((a, b) => a + b) / period;
                const variance = slice.reduce((acc, val) => acc + Math.pow(val - mean, 2), 0) / period;
                const std = Math.sqrt(variance);
                
                upper.push(sma[i - period + 1] + (std * stdDev));
                lower.push(sma[i - period + 1] - (std * stdDev));
            }
            
            return { upper, lower, middle: sma };
        }
        
        function calculateIchimoku(highs, lows, conversionPeriod, basePeriod, spanPeriod) {
            const conversion = [];
            const base = [];
            const spanA = [];
            const spanB = [];
            
            for (let i = conversionPeriod - 1; i < highs.length; i++) {
                const highestHigh = Math.max(...highs.slice(i - conversionPeriod + 1, i + 1));
                const lowestLow = Math.min(...lows.slice(i - conversionPeriod + 1, i + 1));
                conversion.push((highestHigh + lowestLow) / 2);
            }
            
            for (let i = basePeriod - 1; i < highs.length; i++) {
                const highestHigh = Math.max(...highs.slice(i - basePeriod + 1, i + 1));
                const lowestLow = Math.min(...lows.slice(i - basePeriod + 1, i + 1));
                base.push((highestHigh + lowestLow) / 2);
            }
            
            for (let i = 0; i < Math.min(conversion.length, base.length); i++) {
                spanA.push((conversion[i] + base[i]) / 2);
            }
            
            for (let i = spanPeriod - 1; i < highs.length; i++) {
                const highestHigh = Math.max(...highs.slice(i - spanPeriod + 1, i + 1));
                const lowestLow = Math.min(...lows.slice(i - spanPeriod + 1, i + 1));
                spanB.push((highestHigh + lowestLow) / 2);
            }
            
            return { conversion, base, spanA, spanB };
        }
        
        function checkSignals(indicators) {
            if (!indicators) return;
            
            const threshold = parseInt(document.getElementById('threshold').value);
            const minVolumeUSD = parseFloat(document.getElementById('min-volume').value);
            
            // Alternância: só gera sinal se for diferente do último
            const buySignal = indicators.score >= threshold && lastSignal !== 1 && indicators.volumeUSD > minVolumeUSD;
            const sellSignal = indicators.score <= -threshold && lastSignal !== -1 && indicators.volumeUSD > minVolumeUSD;
            
            if (buySignal) {
                lastSignal = 1;
                addSignal('LONG', indicators.score);
                performanceStats.longSignals++;
                performanceStats.totalSignals++;
            } else if (sellSignal) {
                lastSignal = -1;
                addSignal('SHORT', indicators.score);
                performanceStats.shortSignals++;
                performanceStats.totalSignals++;
            }
            
            updatePerformanceDisplay();
        }
        
        function addSignal(type, score) {
            const now = new Date();
            const timeString = now.toLocaleTimeString();
            const currentPrice = currentData[currentData.length - 1].close;
            const signal = {
                type,
                score,
                time: timeString,
                price: currentPrice,
                timestamp: now
            };
            
            signals.unshift(signal);
            if (signals.length > 50) signals.pop();
            
            // Adicionar sinal ao gráfico
            addSignalToChart(type, currentPrice, now);
            
            updateSignalHistory();
        }
        
        function addSignalToChart(type, price, timestamp) {
            if (!chart) return;
            
            const datasetIndex = type === 'LONG' ? 1 : 2;
            const signalData = {
                x: timestamp,
                y: price
            };
            
            chart.data.datasets[datasetIndex].data.push(signalData);
            
            // Manter apenas os últimos 200 sinais no gráfico para melhor visualização
            if (chart.data.datasets[datasetIndex].data.length > 200) {
                chart.data.datasets[datasetIndex].data.shift();
            }
            
            chart.update('none');
        }
        
        // FUNÇÃO REMOVIDA - Agora usamos apenas o sistema Python unificado
        
        // Função para atualizar gráfico com sinais históricos (APENAS PYTHON INDICATOR)
        function updateChartWithHistoricalSignals(data) {
            if (!chart || !data.length) return;
            
            // Limpar sinais existentes
            chart.data.datasets[1].data = [];
            chart.data.datasets[2].data = [];
            chart.data.datasets[3].data = [];
            chart.data.datasets[4].data = [];
            
            // Usar APENAS o indicador Python otimizado
            updateChartWithPythonIndicator(data);
        }
        
        function updateSignalHistory() {
            const historyElement = document.getElementById('signal-history');
            
            // Usar apenas sinais Python para histórico
            const pythonSignals = computeTradingSignals(currentData);
            const allSignals = pythonSignals.filter(s => s.longSignal || s.shortSignal).map(s => ({
                type: s.longSignal ? 'LONG' : 'SHORT',
                price: s.price,
                time: new Date(s.time).toLocaleTimeString(),
                score: s.score
            })).slice(-20).reverse();
            
            if (allSignals.length === 0) {
                historyElement.innerHTML = '<div class="loading">Aguardando sinais...</div>';
                return;
            }
            
            historyElement.innerHTML = allSignals.slice(0, 20).map(signal => {
                return `
                    <div class="signal-item signal-${signal.type.toLowerCase()}">
                        <strong>${signal.type}</strong> @ $${signal.price.toFixed(4)}
                        <br><small>${signal.time} - Score: ${signal.score}</small>
                    </div>
                `;
            }).join('');
        }
        
        function updateIndicatorDisplay(indicators) {
            if (!indicators) return;
            
            document.getElementById('rsi-value').textContent = indicators.rsi.toFixed(2);
            document.getElementById('macd-value').textContent = indicators.macdMomentum.toFixed(4);
            document.getElementById('stoch-value').textContent = indicators.neuralStoch.toFixed(2);
            document.getElementById('score-value').textContent = indicators.score.toString();
            
            const scoreElement = document.getElementById('score-value');
            scoreElement.className = 'indicator-value';
            if (indicators.score > 0) scoreElement.classList.add('metric-positive');
            else if (indicators.score < 0) scoreElement.classList.add('metric-negative');
        }
        
        function updatePerformanceDisplay() {
            // Usar sinais Python para estatísticas
            const pythonSignals = computeTradingSignals(currentData);
            const longCount = pythonSignals.filter(s => s.longSignal).length;
            const shortCount = pythonSignals.filter(s => s.shortSignal).length;
            
            document.getElementById('total-signals').textContent = longCount + shortCount;
            document.getElementById('long-signals').textContent = longCount;
            document.getElementById('short-signals').textContent = shortCount;
            
            const lastSignalElement = document.getElementById('last-signal');
            const signalsWithData = pythonSignals.filter(s => s.longSignal || s.shortSignal);
            if (signalsWithData.length > 0) {
                const lastSignal = signalsWithData[signalsWithData.length - 1];
                const signalType = lastSignal.longSignal ? 'LONG' : 'SHORT';
                const signalTime = new Date(lastSignal.time).toLocaleTimeString();
                lastSignalElement.textContent = `${signalType} @ ${signalTime}`;
                lastSignalElement.className = `metric-value ${signalType === 'LONG' ? 'metric-positive' : 'metric-negative'}`;
            }
        }
        
        function updatePriceDisplay(price) {
            const priceElement = document.getElementById('current-price');
            const oldPrice = parseFloat(priceElement.textContent.replace('$', ''));
            
            priceElement.textContent = `$${price.toFixed(4)}`;
            
            if (price > oldPrice) {
                priceElement.className = 'price-display price-up';
            } else if (price < oldPrice) {
                priceElement.className = 'price-display price-down';
            }
            
            // Simular status conectado se tivermos dados
            if (price > 0) {
                document.getElementById('status-text').textContent = 'Conectado ✅';
                document.getElementById('connection-status').classList.add('connected');
            }
            
            checkPriceAlerts(price);
        }
        
        function addPriceAlert() {
            const alertPrice = parseFloat(document.getElementById('alert-price').value);
            if (isNaN(alertPrice) || alertPrice <= 0) {
                alert('Por favor, insira um preço válido para o alerta.');
                return;
            }
            
            alertPrices.push(alertPrice);
            updateAlertsDisplay();
            document.getElementById('alert-price').value = '';
        }
        
        function clearAlerts() {
            alertPrices = [];
            updateAlertsDisplay();
        }
        
        function updateAlertsDisplay() {
            const alertsElement = document.getElementById('active-alerts');
            
            if (alertPrices.length === 0) {
                alertsElement.innerHTML = '';
                return;
            }
            
            alertsElement.innerHTML = alertPrices.map((price, index) => `
                <div class="alert-setup">
                    <span>Alerta: $${price.toFixed(4)}</span>
                    <button onclick="removeAlert(${index})" style="margin-left: 10px; padding: 2px 8px; font-size: 0.8em;">×</button>
                </div>
            `).join('');
        }
        
        function removeAlert(index) {
            alertPrices.splice(index, 1);
            updateAlertsDisplay();
        }
        
        function checkPriceAlerts(currentPrice) {
            alertPrices.forEach((alertPrice, index) => {
                const tolerance = alertPrice * 0.001;
                if (Math.abs(currentPrice - alertPrice) <= tolerance) {
                    playAlertSound();
                    showAlertNotification(alertPrice);
                    removeAlert(index);
                }
            });
        }
        
        function playAlertSound() {
            alertSound.play().catch(e => console.log('Não foi possível reproduzir o som do alerta'));
        }
        
        function showAlertNotification(price) {
            if (Notification.permission === 'granted') {
                new Notification('Alerta de Preço SOLANA', {
                    body: `O preço atingiu $${price.toFixed(4)}`,
                    icon: 'data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><circle cx="50" cy="50" r="40" fill="%2300d4aa"/></svg>'
                });
            }
        }
        
        async function runSimulation() {
            const initialBankroll = parseFloat(document.getElementById('initial-bankroll').value);
            const riskPercent = parseFloat(document.getElementById('risk-per-trade').value) / 100;
            const leverage = parseFloat(document.getElementById('leverage').value);
            const stopLoss = parseFloat(document.getElementById('stop-loss').value) / 100;
            const takeProfit = parseFloat(document.getElementById('take-profit').value) / 100;
            const fees = parseFloat(document.getElementById('fees').value) / 100;
            
            if (!currentData.length) {
                alert('Aguarde dados serem carregados');
                return;
            }
            
            // Calcular sinais Python para a simulação
            const pythonSignals = computeTradingSignals(currentData);
            const signalsToUse = pythonSignals.filter(s => s.longSignal || s.shortSignal).map(s => ({
                type: s.longSignal ? 'LONG' : 'SHORT',
                price: s.price,
                time: s.time,
                score: s.score
            }));
            
            let currentBankroll = initialBankroll;
            const results = [];
            
            // Simular baseado nos sinais históricos
            signalsToUse.slice().reverse().forEach((signal, index) => {
                const marginUSD = currentBankroll * riskPercent;
                if (marginUSD > currentBankroll) return;
                
                const leveragedPositionSize = marginUSD * leverage;
                const entryPrice = signal.price;
                const tradeType = signal.type.toLowerCase();
                
                // Simular saída baseada em stop loss e take profit
                let exitPrice;
                let exitReason;
                
                // Simulação simples: assume que 60% dos trades atingem take profit
                const randomOutcome = Math.random();
                if (randomOutcome > 0.4) {
                    // Take Profit
                    if (tradeType === 'long') {
                        exitPrice = entryPrice * (1 + takeProfit / leverage);
                    } else {
                        exitPrice = entryPrice * (1 - takeProfit / leverage);
                    }
                    exitReason = 'Take Profit';
                } else {
                    // Stop Loss
                    if (tradeType === 'long') {
                        exitPrice = entryPrice * (1 - stopLoss / leverage);
                    } else {
                        exitPrice = entryPrice * (1 + stopLoss / leverage);
                    }
                    exitReason = 'Stop Loss';
                }
                
                // Calcular P/L
                let priceChange;
                if (tradeType === 'long') {
                    priceChange = (exitPrice - entryPrice) / entryPrice;
                } else {
                    priceChange = (entryPrice - exitPrice) / entryPrice;
                }
                
                const pnlROI = priceChange * leverage;
                const pnlBruto = pnlROI * marginUSD;
                const totalFees = leveragedPositionSize * fees * 2;
                const pnlLiquido = pnlBruto - totalFees;
                
                currentBankroll += pnlLiquido;
                
                results.push({
                    id: index + 1,
                    type: signal.type,
                    entryPrice: entryPrice,
                    exitPrice: exitPrice,
                    pnlPercent: pnlROI * 100,
                    pnlUSD: pnlLiquido,
                    reason: exitReason
                });
            });
            
            simulationResults = results;
            displaySimulationResults(initialBankroll, currentBankroll);
        }
        
        function displaySimulationResults(initialBankroll, finalBankroll) {
            const resultsDiv = document.getElementById('simulation-results');
            const summaryDiv = document.getElementById('simulation-summary');
            const tbody = document.getElementById('simulation-tbody');
            
            const totalPnL = finalBankroll - initialBankroll;
            const totalPnLPercent = (totalPnL / initialBankroll) * 100;
            const wins = simulationResults.filter(r => r.pnlUSD > 0).length;
            const losses = simulationResults.filter(r => r.pnlUSD < 0).length;
            const winRate = (wins / (wins + losses)) * 100;
            
            summaryDiv.innerHTML = `
                <div class="metric-row">
                    <span class="metric-label">Banca Final:</span>
                    <span class="metric-value ${totalPnL >= 0 ? 'metric-positive' : 'metric-negative'}">
                        $${finalBankroll.toFixed(2)}
                    </span>
                </div>
                <div class="metric-row">
                    <span class="metric-label">P/L Total:</span>
                    <span class="metric-value ${totalPnL >= 0 ? 'metric-positive' : 'metric-negative'}">
                        $${totalPnL.toFixed(2)} (${totalPnLPercent.toFixed(2)}%)
                    </span>
                </div>
                <div class="metric-row">
                    <span class="metric-label">Taxa de Acerto:</span>
                    <span class="metric-value">${winRate.toFixed(2)}%</span>
                </div>
                <div class="metric-row">
                    <span class="metric-label">Trades:</span>
                    <span class="metric-value">${wins + losses}</span>
                </div>
            `;
            
            tbody.innerHTML = simulationResults.map(result => `
                <tr>
                    <td>${result.id}</td>
                    <td class="${result.type === 'LONG' ? 'metric-positive' : 'metric-negative'}">${result.type}</td>
                    <td>$${result.entryPrice.toFixed(4)}</td>
                    <td>$${result.exitPrice.toFixed(4)}</td>
                    <td class="${result.pnlPercent >= 0 ? 'metric-positive' : 'metric-negative'}">
                        ${result.pnlPercent.toFixed(2)}%
                    </td>
                    <td class="${result.pnlUSD >= 0 ? 'metric-positive' : 'metric-negative'}">
                        $${result.pnlUSD.toFixed(2)}
                    </td>
                    <td>${result.reason}</td>
                </tr>
            `).join('');
            
            resultsDiv.style.display = 'block';
        }
        
        async function runOptimization() {
            const leverageRange = document.getElementById('opt-leverage').value.split(',').map(x => parseFloat(x.trim()));
            const riskRange = document.getElementById('opt-risk').value.split(',').map(x => parseFloat(x.trim()));
            const slRange = document.getElementById('opt-sl').value.split(',').map(x => parseFloat(x.trim()));
            const tpRange = document.getElementById('opt-tp').value.split(',').map(x => parseFloat(x.trim()));
            
            if (leverageRange.length !== 3 || riskRange.length !== 3 || slRange.length !== 3 || tpRange.length !== 3) {
                alert('Por favor, insira os parâmetros no formato: min,max,step');
                return;
            }
            
            document.getElementById('optimization-progress').style.display = 'block';
            document.getElementById('optimization-results').style.display = 'none';
            
            const results = [];
            let completed = 0;
            
            // Gerar todas as combinações
            const leverageValues = generateRange(leverageRange[0], leverageRange[1], leverageRange[2]);
            const riskValues = generateRange(riskRange[0], riskRange[1], riskRange[2]);
            const slValues = generateRange(slRange[0], slRange[1], slRange[2]);
            const tpValues = generateRange(tpRange[0], tpRange[1], tpRange[2]);
            
            const totalCombinations = leverageValues.length * riskValues.length * slValues.length * tpValues.length;
            
            for (let lev of leverageValues) {
                for (let risk of riskValues) {
                    for (let sl of slValues) {
                        for (let tp of tpValues) {
                            const result = simulateParameters(lev, risk / 100, sl / 100, tp / 100);
                            results.push({
                                leverage: lev,
                                risk: risk,
                                sl: sl,
                                tp: tp,
                                ...result
                            });
                            
                            completed++;
                            const progress = (completed / totalCombinations * 100).toFixed(1);
                            document.getElementById('progress-text').textContent = `${progress}%`;
                            
                            // Permitir que a UI atualize
                            if (completed % 10 === 0) {
                                await new Promise(resolve => setTimeout(resolve, 1));
                            }
                        }
                    }
                }
            }
            
            // Ordenar por P/L total
            results.sort((a, b) => b.totalPnLPercent - a.totalPnLPercent);
            
            optimizationResults = results;
            displayOptimizationResults();
            
            document.getElementById('optimization-progress').style.display = 'none';
            document.getElementById('optimization-results').style.display = 'block';
        }
        
        function generateRange(min, max, step) {
            const values = [];
            for (let i = min; i <= max; i += step) {
                values.push(parseFloat(i.toFixed(2)));
            }
            return values;
        }
        
        function simulateParameters(leverage, riskPercent, stopLoss, takeProfit) {
            const initialBankroll = 1000;
            let currentBankroll = initialBankroll;
            const fees = 0.0005;
            let wins = 0;
            let losses = 0;
            
            // Usar sinais Python para otimização
            const pythonSignals = computeTradingSignals(currentData);
            const recentSignals = pythonSignals.filter(s => s.longSignal || s.shortSignal).map(s => ({
                type: s.longSignal ? 'LONG' : 'SHORT',
                price: s.price,
                time: s.time,
                score: s.score
            })).slice(0, 20);
            
            recentSignals.forEach(signal => {
                const marginUSD = currentBankroll * riskPercent;
                if (marginUSD > currentBankroll) return;
                
                const leveragedPositionSize = marginUSD * leverage;
                const entryPrice = signal.price;
                const tradeType = signal.type.toLowerCase();
                
                // Simulação simples baseada em probabilidades
                const randomOutcome = Math.random();
                let exitPrice;
                
                if (randomOutcome > 0.4) {
                    // Take Profit
                    if (tradeType === 'long') {
                        exitPrice = entryPrice * (1 + takeProfit / leverage);
                    } else {
                        exitPrice = entryPrice * (1 - takeProfit / leverage);
                    }
                    wins++;
                } else {
                    // Stop Loss
                    if (tradeType === 'long') {
                        exitPrice = entryPrice * (1 - stopLoss / leverage);
                    } else {
                        exitPrice = entryPrice * (1 + stopLoss / leverage);
                    }
                    losses++;
                }
                
                let priceChange;
                if (tradeType === 'long') {
                    priceChange = (exitPrice - entryPrice) / entryPrice;
                } else {
                    priceChange = (entryPrice - exitPrice) / entryPrice;
                }
                
                const pnlROI = priceChange * leverage;
                const pnlBruto = pnlROI * marginUSD;
                const totalFees = leveragedPositionSize * fees * 2;
                const pnlLiquido = pnlBruto - totalFees;
                
                currentBankroll += pnlLiquido;
            });
            
            const totalPnL = currentBankroll - initialBankroll;
            const totalPnLPercent = (totalPnL / initialBankroll) * 100;
            const winRate = (wins / (wins + losses)) * 100 || 0;
            const avgWin = wins > 0 ? (totalPnL / wins) : 0;
            const avgLoss = losses > 0 ? (Math.abs(totalPnL) / losses) : 1;
            const payoff = avgLoss > 0 ? (avgWin / avgLoss) : 0;
            
            return {
                totalPnLPercent,
                winRate,
                payoff: payoff.toFixed(2)
            };
        }
        
        function displayOptimizationResults() {
            const tbody = document.getElementById('optimization-tbody');
            
            tbody.innerHTML = optimizationResults.slice(0, 50).map(result => `
                <tr>
                    <td>${result.leverage}</td>
                    <td>${result.risk.toFixed(1)}%</td>
                    <td>${result.sl.toFixed(1)}%</td>
                    <td>${result.tp.toFixed(1)}%</td>
                    <td class="${result.totalPnLPercent >= 0 ? 'metric-positive' : 'metric-negative'}">
                        ${result.totalPnLPercent.toFixed(2)}%
                    </td>
                    <td>${result.winRate.toFixed(2)}%</td>
                    <td>${result.payoff}</td>
                </tr>
            `).join('');
        }
        
        function downloadOptimizationResults() {
            if (!optimizationResults.length) {
                alert('Execute a otimização primeiro');
                return;
            }
            
            const headers = ['Alavancagem', 'Risco (%)', 'SL ROI (%)', 'TP ROI (%)', 'P/L Total (%)', 'Win Rate (%)', 'Payoff'];
            const csvContent = [
                headers.join(','),
                ...optimizationResults.map(result => 
                    `${result.leverage},${result.risk},${result.sl},${result.tp},${result.totalPnLPercent.toFixed(2)},${result.winRate.toFixed(2)},${result.payoff}`
                )
            ].join('\n');
            
            const blob = new Blob([csvContent], { type: 'text/csv' });
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.style.display = 'none';
            a.href = url;
            a.download = `optimization_results_${new Date().toISOString().slice(0, 10)}.csv`;
            document.body.appendChild(a);
            a.click();
            window.URL.revokeObjectURL(url);
            document.body.removeChild(a);
        }
        
        function resetZoom() {
            if (chart) {
                chart.resetZoom();
            }
        }
        
        async function loadMoreHistory() {
            try {
                document.getElementById('status-text').textContent = 'Carregando mais dados...';
                
                // Carregar mais 168 horas (7 dias adicionais)
                const moreData = await fetchKlineData(504); // 336 + 168 = 504 horas (21 dias)
                
                if (moreData && moreData.length > 0) {
                    currentData = moreData;
                    
                    // Atualizar gráfico com todos os dados
                    const chartData = moreData.map(d => ({
                        x: d.time,
                        y: d.close
                    }));
                    
                    chart.data.datasets[0].data = chartData;
                    
                    // Recalcular sinais históricos com mais dados
                    updateChartWithHistoricalSignals(moreData);
                    
                    chart.update('none');
                    
                    document.getElementById('status-text').textContent = 'Conectado ✅';
                }
            } catch (error) {
                console.error('Erro ao carregar mais dados:', error);
                document.getElementById('status-text').textContent = 'Erro ao carregar ❌';
            }
        }
        
        async function startDataUpdates() {
            if ('Notification' in window && Notification.permission === 'default') {
                await Notification.requestPermission();
            }
            
            try {
                // Primeira carga: carregar 336 horas de histórico
                document.getElementById('status-text').textContent = 'Carregando 336 horas de dados...';
                await updateData(336);
                
                // Forçar cálculo dos sinais históricos com a configuração padrão
                if (currentData.length > 0) {
                    setTimeout(() => {
                        updateChartWithHistoricalSignals(currentData);
                        // Ativar indicador Python automaticamente com as configurações padrão
                        if (pythonIndicatorConfig.enabled) {
                            updateChartWithPythonIndicator(currentData);
                        }
                    }, 500);
                }
                
                document.getElementById('connection-status').classList.add('connected');
                document.getElementById('status-text').textContent = 'Conectado ✅';
                
                fetch24hStats();
                setInterval(fetch24hStats, 60000);
                
                // Atualizar apenas dados recentes a cada segundo
                setInterval(() => updateData(1), UPDATE_INTERVAL);
            } catch (error) {
                console.error('Erro na inicialização:', error);
                document.getElementById('status-text').textContent = 'Erro na conexão ❌';
            }
        }
        
        async function updateData(hours = 200) {
            try {
                const data = await fetchKlineData(hours);
                if (data && data.length > 0) {
                    currentData = data;
                    
                    // Atualizar gráfico apenas se for uma carga inicial ou se os dados mudaram significativamente
                    if (hours > 100 || !chart.data.datasets[0].data.length) {
                        const chartData = data.map(d => ({
                            x: d.time,
                            y: d.close
                        }));
                        
                        chart.data.datasets[0].data = chartData;
                        
                        // Calcular e exibir sinais históricos
                        updateChartWithHistoricalSignals(data);
                        
                        chart.update('none');
                    } else {
                        // Para atualizações em tempo real, apenas adicionar/atualizar o último ponto
                        const latestData = {
                            x: data[data.length - 1].time,
                            y: data[data.length - 1].close
                        };
                        
                        const chartData = chart.data.datasets[0].data;
                        if (chartData.length > 0) {
                            // Verificar se é uma atualização do último candle ou um novo candle
                            const lastTime = new Date(chartData[chartData.length - 1].x).getTime();
                            const newTime = new Date(latestData.x).getTime();
                            
                            if (newTime > lastTime) {
                                // Novo candle
                                chartData.push(latestData);
                            } else {
                                // Atualização do último candle
                                chartData[chartData.length - 1] = latestData;
                            }
                        } else {
                            chartData.push(latestData);
                        }
                        
                        chart.update('none');
                    }
                    
                    const indicators = calculateIndicators(data);
                    if (indicators) {
                        updateIndicatorDisplay(indicators);
                        checkSignals(indicators);
                    }
                    
                    const currentPrice = data[data.length - 1].close;
                    updatePriceDisplay(currentPrice);
                }
            } catch (error) {
                console.error('Erro na atualização dos dados:', error);
                document.getElementById('status-text').textContent = 'Erro na conexão ❌';
                document.getElementById('connection-status').classList.remove('connected');
            }
        }
    </script>
</body>
</html>